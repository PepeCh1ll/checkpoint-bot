from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import NetworkError
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from random import randint
import requests
import sqlite3

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
hello = """üëã–ü—Ä–∏–≤–µ—Ç! –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç

‚úÖ–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —á–µ–∫–ø–æ–∏–Ω—Ç–∞

–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üë®–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞ —á–µ–∫–ø–æ–∏–Ω—Ç–∞"
2. –û–±–Ω–æ–≤–ª—è–π —Ñ–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—à—å –Ω—É–∂–Ω–æ–µ —Ç–µ–±–µ –ª–∏—Ü–æ
3. –ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å–µ–±–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
4. –ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –∫ –¶—É–∫–µ—Ä—É (Facebook)"""

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
first = 'üë®–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞ —á–µ–∫–ø–æ–∏–Ω—Ç–∞'
reload = 'üîÑ–û–±–Ω–æ–≤–∏—Ç—å'

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '5403965855:AAEfs0zZVw1upFsVYsBVy_4fQcd03rR76ys'

# Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admins = []

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connect = sqlite3.connect('database.db')
cursor = connect.cursor()

cursor.execute("CREATE TABLE IF NOT EXISTS users (id text)")
connect.commit()


# –ö–ª–∞—Å—Å –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
class States(StatesGroup):
    text = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if cursor.execute(f"SELECT * FROM users WHERE id='{message.chat.id}'").fetchone() == None:
        cursor.execute(f"INSERT INTO users VALUES('{message.chat.id}')")
        connect.commit()
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    keyboard = types.ReplyKeyboardMarkup([[types.KeyboardButton(first)]],
                                         resize_keyboard=True)
    await bot.send_message(message.chat.id, hello, reply_markup=keyboard)


@dp.message_handler()
async def else_messages(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    if message.text in [first, reload]:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        with requests.Session() as session:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å —Å–∞–π—Ç–∞
            data = session.get('https://thispersondoesnotexist.com/image')
            photo = (f'image{randint(1000, 9999)}.jpeg', data.content)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        keyboard = types.ReplyKeyboardMarkup([[types.KeyboardButton(reload)]], resize_keyboard=True)
        await bot.send_document(message.chat.id, photo, reply_markup=keyboard)
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = types.ReplyKeyboardMarkup([[types.KeyboardButton(first)]],
                                             resize_keyboard=True)
        await bot.send_message(message.chat.id, hello, reply_markup=keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
